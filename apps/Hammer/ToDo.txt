
Light pre-pass renderer
~~~~~~~~~~~~~~~~~~~~~~~
[DONE] 1. Create Z-GBuffer to contain 16bit depth + 16bit normal (xy)
[DONE] 2. Render scene into Z-GBuffer using custom pixel shader (screen-space normals)
[DONE] 2a. Render ZGBuffer onto corner of the screen
2b. For debug decode normal and depth and draw to seperate screen areas

3. Create Light buffer containing 32 bits of something
4. For each light render the info into the buffer
5. Switch to forward render and look-up into light buffer for lighting information


Misc
~~~~
Handle textured models (names/purpose [nrm/dif/spc] in model format)
FPS counter
Build system for assets...!


Code Management
~~~~~~~~~~~~~~~
Renderer class 
	Handle drawing rendertargets without using GUI class (change shaders etc)
Use FX instead of psh/vsh
Shader library?
Texture loader / library
Camera class
Scene class



Components

	RigidBody component
		
		Debug info (ptr to name etc)
		Pointer to a rigidbody
		Index into SoA data in manager
			- Local transform matrix
			- Previous local transform matrix
		
	Renderable component
	
		Debug info (ptr to name etc)
		Model pointer
		Index into SoA data in manager
			- Material information (packed)
			- Local transform matrix
		
		
		
Factories		

	RigidBody factory - contains 'hot' data
		Array of local matrices
		Array of previous local matrices
		List of active components

	Renderable factory - contains 'hot' data
		Array of material information
		Array of local transform matrices
		Array of World transform matrices

