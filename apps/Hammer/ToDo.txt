
Light pre-pass renderer
~~~~~~~~~~~~~~~~~~~~~~~
[DONE] 1. Create Z-GBuffer to contain 16bit depth + 16bit normal (xy)
[DONE] 2. Render scene into Z-GBuffer using custom pixel shader (screen-space normals)
[DONE] 2a. Render ZGBuffer onto corner of the screen
[DONE] 2b. For debug decode normal and depth and draw to seperate screen areas

[DONE] 3. Create Light buffer containing 32 bits of something
[DONE] 4. For each light render the info into the buffer
[DONE] 4a. Implement directional and ambient 
[DONE] 4b. Implement point light
4bI. Divide screen into tiles
[DONE] 5. Switch to forward render and look-up into light buffer for lighting information
6. Use linear depth instead of /w depth
7. Implement straight multi-pass forward renderer for comparison


Divide screen into tiles
Transform light volumes into screenspace
Sort tiles by number of lights
For each tile group set technique, light info and render tiles



Misc
~~~~

Either seperate World and View matrix and multiply in shader 
OR pre-compute WorldView and WorldViewProj for each object?

Handle textured models (names/purpose [nrm/dif/spc] in model format)
FPS counter
Build system for assets...!

Resource system with hotloading
	Thread sits there watching for file changes
	Locate Resource associated (shader,model,texture) and sends it a reload message
	
FX system
Worker thread system
	Lock-free (or locking!) queue of work to be done


Code Management
~~~~~~~~~~~~~~~
Renderer class 
	Handle drawing rendertargets without using GUI class (change shaders etc)
[DONE] Use FX instead of psh/vsh
Shader library?
Texture loader / library
Camera class
Scene class

Physics engine integration
Scene editor integration


Components

	RigidBody component
		
		Debug info (ptr to name etc)
		Pointer to a rigidbody
		Index into SoA data in manager
			- Local transform matrix
			- Previous local transform matrix
		
	Renderable component
	
		Debug info (ptr to name etc)
		Model pointer
		Index into SoA data in manager
			- Material information (packed)
			- Local transform matrix
		
		
		
Factories		

	RigidBody factory - contains 'hot' data
		Array of local matrices
		Array of previous local matrices
		List of active components

	Renderable factory - contains 'hot' data
		Array of material information
		Array of local transform matrices
		Array of World transform matrices

