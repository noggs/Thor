
// Pixel shader input structure
struct PS_INPUT
{
    float4 Position   : POSITION;
    float2 Texture    : TEXCOORD0;
    float3 Normal     : TEXCOORD1;
    float  Depth      : TEXCOORD2;
};


// Pixel shader output structure
struct PS_OUTPUT
{
    float4 Color   : COLOR0;
};


// Global variables
float4x4 WorldViewProj;



float2 F32_Compress(float f)
{
	float u,v;
	float res_u;

	u = floor(f*256.0);
	res_u = f*256.0 - u;
	v = floor(res_u * 256.0);

	return (1/256.0*float2(u,v));
}

float F32_Decompress(float2 vec)
{
return (vec.x+vec.y*1.0/256.0);
}


PS_OUTPUT ps_main( in PS_INPUT In )
{
    PS_OUTPUT Out;                             //create an output pixel

	//Out.Color = float4(In.Normal, 1.0f);
	Out.Color = float4(In.Depth, In.Depth, In.Depth, 1.0f);
	
	// pack normal into the first 16 bits and depth into next two
	Out.Color = float4(In.Normal.x, In.Normal.y, 0.0f, 0.0f);
	
	Out.Color = float4(F32_Compress(In.Depth), 0.0f, 1.0f );
	
	Out.Color = float4(In.Normal.x, In.Normal.y, F32_Compress(In.Depth));

    return Out;                                //return output pixel
}
